document.addEventListener('DOMContentLoaded', () => {
    const video = document.getElementById("my-video");
    const canvas = document.getElementById("my-canvas");
    const ctx = canvas.getContext('2d');
    const asciiArtElem = document.getElementById('asciiArt');

    const asciiChars = [' ', '.', ',', ':', ';', '+', '*', '?', '%', 'S', '#', '@'];

    function resizeCanvas() {
        console.log('Resizing canvas...');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
    }

    function processFrame() {
        console.log('Processing frame...');
        // Check if video dimensions are available
        if (video.videoWidth === 0 || video.videoHeight === 0) {
            // Video dimensions are not available yet, retry after a short delay
            setTimeout(processFrame, 100);
            return;
        }

        // Resize canvas based on video dimensions
        resizeCanvas();

        // Draw video frame on canvas
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

        // Get image data from canvas
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const asciiArt = convertToAscii(imageData);
        asciiArtElem.textContent = asciiArt;

        // Request next frame
        requestAnimationFrame(processFrame);
    }

    function greyValue(rgb) {
        let r = (rgb >> 16) & 0xFF;
        let g = (rgb >> 8) & 0xFF;
        let b = rgb & 0xFF;
        return (r + g + b) / 3;
    }

    function convertToAscii(imageData) {
        console.log('Converting to ASCII...');
        const pixels = imageData.data;
        const asciiWidth = 100; // Adjust according to desired ASCII width
        const asciiHeight = Math.floor(imageData.height * (asciiWidth / imageData.width));
        const asciiLength = asciiChars.length;
        let asciiArt = '';

        for (let y = 0; y < asciiHeight; y++) {
            for (let x = 0; x < asciiWidth; x++) {
                const pixelIndex = (Math.floor(y * (imageData.height / asciiHeight)) * imageData.width + Math.floor(x * (imageData.width / asciiWidth))) * 4;
                const grey = greyValue(
                    (pixels[pixelIndex] << 16) |
                    (pixels[pixelIndex + 1] << 8) |
                    (pixels[pixelIndex + 2])
                );
                const index = Math.floor(grey / (255 / asciiLength));
                asciiArt += asciiChars[index];
            }
            asciiArt += '\n';
        }

        return asciiArt;
    }

    // Ensure canvas is resized initially
    console.log('Initializing...');
    resizeCanvas();

    // Start processing frames
    processFrame();

    // Ensure canvas is resized when window size changes
    window.addEventListener('resize', () => {
        console.log('Window resized...');
        resizeCanvas();
    });
});
